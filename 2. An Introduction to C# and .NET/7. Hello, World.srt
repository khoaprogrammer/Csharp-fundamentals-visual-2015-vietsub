1
00:00:00,000 --> 00:00:09,000
Tôi đang đến di chuyển đến Start menu trong Windows, và tôi chỉ gõ vào thanh tìm kiếm từ command


2
00:00:09,000 --> 00:00:13,000
bởi vì cái mà tôi muốn mở là command prompt. Chúng ta sẽ viết chương trình đầu tiên của chúng ta sử dụng 1 vài


3
00:00:13,000 --> 00:00:19,000
công cụ ở mức thấp và không xài VS bạn có thể thấy 1 vài cái đang xảy ra phía sau màn hình.


4
00:00:19,000 --> 00:00:26,000
khi bạn cài đặt VS, VS sẽ cài 1 vài công cụ dòng lệnh mà bạn có thể dùng để tạo ứng dụng.


5
00:00:26,000 --> 00:00:31,000
Không nhiều người sẽ sử dụng các công cụ dòng lệnh này hàng ngày, họ sẽ sử dụng Visual Studio thay vào đó,


6
00:00:31,000 --> 00:00:33,000
Nhưng bây giờ tôi đang thử làm 1 vài điều đơn giản.


7
00:00:33,000 --> 00:00:40,000
Tôi sẽ vào tập tin my Documents, và tôi chỉ sẽ dùng notepad để tao 1 file gọi là hello.cs.


8
00:00:40,000 --> 00:00:46,000
kết quả là là tạo ra 1 ví dụ kinh điển (hello world), tôi có thể chạy 1 vài thứ và chỉ là in ra chuỗi hello


9
00:00:46,000 --> 00:00:50,000
hiện lên màn hình, và tôi sẽ làm bằng cách thay code của mình vào 1 file được gọi là hello.cs.


10
00:00:50,000 --> 00:00:57,000
(.cs) là 1 phần mở rộng cho code nguồn C#. Tất cả các  của .Net và mỗi Dev .NET sẽ biết


11
00:00:57,000 --> 00:01:05,000
là 1  (file).cs sẽ  bao ngồm C# source code. và bên trong đây tôi sẽ tạo 1 class.


12
00:01:05,000 --> 00:01:09,000
Có khá nhiều khái niệm mà chúng ta phải nắm bắt trong 1 demo vô cùng đơn giản này,


13
00:01:09,000 --> 00:01:15,000
những thứ như là classes và từ khóa mới, và chúng ta sẽ sẽ học chúng trong suốt khóa học này.


14
00:01:15,000 --> 00:01:20,000
Bây giờ, chỉ biết rằng phần lớn code mà ta viết cho .Net sẽ nằm bên trong 1 class.


15
00:01:20,000 --> 00:01:28,000
Và bên trong 1 class tôi có thể tạo các phương thức. Tôi sẽ tạo 1 phương thước là Main.


16
00:01:28,000 --> 00:01:33,000
Bắt đầu với phương thức này với dấu ngoặc nhọn và kết thúc với dấu ngoặc nhọn.



17
00:01:33,000 --> 00:01:39,000
Giống như với class, Tôi đặt bất cứ thứ gì tôi đặt bên ngoài giữa các dấu ngoặc nhọn  sẽ là một phần của lớp này hoặc


18
00:01:39,000 --> 00:01:45,000
Bên trong lớp này,và bây giờ tôi sẽ đặt code bất cứ thứ gì là trong phương thức main này mà được thực thi khi tôi 


19
00:01:45,000 --> 00:01:48,000
chạy chương trình này, và đó là nơi mà 1 ít ma thuật xuất hiện ở đây.


20
00:01:48,000 --> 00:01:54,000
khi (CLR) bắt đấu 1 command line application, cái mà chúng ta gọi là console application,1 vài cái tôi sẽ


21
00:01:54,000 --> 00:02:00,000
chạy từ command prompt, nó sẽ tự động tìm kiếm cho 1 chương trình class với 1 phương thức Main và chỉ bắt đầu


22
00:02:00,000 --> 00:02:06,000
thực thi code bên trong đây cho tôi. Nếu tôi đã thay thế bên trong đấy 1 vài thứ như


23
00:02:06,000 --> 00:02:14,000
System.Console.WriteLine, Hello World, sau đó đây là 1 vài code giống giống nhau mà chúng ta có trên silde.


24
00:02:14,000 --> 00:02:20,000
chúng ta có Console.WriteLine.Cái gì mới ở đây có phải từ khóa System, và từ khóa System này tồn bởi vì bên trong


25
00:02:20,000 --> 00:02:26,000
của .NET có hàng ngàn và hàng ngàn class mà bạn có thể dùng, như class Console.


26
00:02:26,000 --> 00:02:31,000
Và chúng ta không càn tất cả 10,000 hoặc hơn nhiều class khả thi trong 1 lần, cho cái mà .NET làm nó có phải là phân vùng


27
00:02:31,000 --> 00:02:38,000
nhiều class vào trong nhiều namespaces. Và để dùng 1 class, bạn phải  rất rõ ràng và để cho. NET  biết từ


28
00:02:38,000 --> 00:02:44,000
tên namespace mà class ở trong đó mà dùng Console class, nó ở trong 1 namespace được gọi là System,


29
00:02:44,000 --> 00:02:51,000
Vì vậy tôi hoặc là phải sử dụng từ System ở đây hay ở 1 chỗ nào đó để nói .NET về cái namespaces mà tôi


30
00:02:51,000 --> 00:02:57,000
cần, và nó đang sử dụng với từ khóa using. Nếu bạn nói using System và 1 dấu (;)có cần ko? , và câu trả lời sẽ nói là : có nó là 


31
00:02:57,000 --> 00:03:01,000
1 phần chắc chắn của code mà phải kết thúc với dấu (;) và 1 trong những phần chắc chắn của code mà không cần 1


32
00:03:01,000 --> 00:03:07,000
dấu (;), chúng ta sẽ nói về điều này nhiều hơn trong suốt khóa học, khi tôi nói sử dụng System, tôi đang nói .NET và
semicolon, we'll talk about that more throughout the course, when I say using System, I'm telling .NET and

33
00:03:07,000 --> 00:03:13,000
công cụ này chúng ta sắp sửa xem, được biết như C# compiler, rằng khi nó gặp các lớp  bên trong này


34
00:03:13,000 --> 00:03:18,000
chương trình, các lớp như Console,nó sẽ tìm kiếm chúng bên trong của System namespace. 


35
00:03:18,000 --> 00:03:21,000
và đây là về những chương trình c# đơn giản nhất mà tôi có thể viết.


36
00:03:21,000 --> 00:03:28,000
Tôi sẽ lưu file này lại và ra command line và chạy 1 công cụ tên csc.exe. 


37
00:03:28,000 --> 00:03:34,000
Công cụ này tồn tại, bởi mặc địng, trong Windos dưới một thư mục gọi là Microsoft.NET.


38
00:03:34,000 --> 00:03:40,000
Bên trong đây, sẽ có 1 tập tin Framework, và sau đó bên trong 1 tập tin Framework,bạn có thể cài đặt đa dạng
Inside of there, there will be a Framework folder, and then inside of a Framework folder you can have various

39
00:03:40,000 --> 00:03:46,000
của .NET Framework,đa phiên bản. và nếu tôi qua tab này, bạn có thể thấy tôi có


40
00:03:46,000 --> 00:03:51,000
nhiếu phiên bản đã cài đặt, v1, v1.1, v 2.Tôi muốn đi đến phiên bản cuối cùng,


41
00:03:51,000 --> 00:03:58,000
nó là v4 bởi vì bên trong đây ,sẽ có 1 vài chương trình nhỏ mà tôi có thể chạy csc.


42
00:03:58,000 --> 00:04:06,000
Csc, như bạn có thể thấy, nó là Visual C# Compiler, mà  code C#  cần để  compiled trước khi nó có thể thực thi.

43
00:04:06,000 --> 00:04:11,000
Đây không giống như 1 vài ngôn ngữ khác, như Perl,Python.


44
00:04:11,000 --> 00:04:17,000
Cái mà tôi cần làm với code C# là chuyển nó qua cho C# compiler, và cái mà C# compiler sẽ làm là sẽ làm  
What I need to do with the C# code is pass it through the C# compiler, and what the C# compiler will do is

45
00:04:17,000 --> 00:04:24,000
Tạo ra một thực thi được mà tôi có thể chạy. Vì vậy, nếu tôi nói csc, và sau đó làm theo đó với tham số hello.cs,



46
00:04:24,000 --> 00:04:32,000
Tôi đang yêu cầu các trình biên dịch C # để biên dịch hello.cs. Và nếu trình biên dịch gặp bất kỳ vấn đề, nó sẽ "phàn nàn",


47
00:04:32,000 --> 00:04:37,000
Nhưng có vẻ như nó đã thành công. Và bên trong thư mục này bây giờ tôi có thể thấy hello.exe, vì vậy hành động của


48
00:04:37,000 --> 00:04:45,000
Biên dịch hello.cs  và phần mở rộng của exe có nghĩa là đây là một tập tin thực thi,


49
00:04:45,000 --> 00:04:52,000
Một cái gì đó mà tôi có thể chạy từ dòng lệnh. Và nếu tôi chạy nó chỉ bằng cách gõ vào hello.exe, tôi nhận được Hello, World!


50
00:04:52,000 --> 00:04:57,000
Bây giờ như tôi đã nói, thông thường bạn không sử dụng csc trực tiếp. Thay vào đó, bạn sử dụng Visual Studio, và Visual Studio


51
00:04:57,000 --> 00:05:04,000
Sẽ tìm ra cách để gọi csc chính xác. Nhưng tôi chỉ muốn chỉ ra rằng csc có thể cung cấp cho bạn một số thông báo lỗi.

52
00:05:04,000 --> 00:05:11,000
Ví dụ, giả sử tôi quên dấu chấm phẩy sau khi sử dụng hệ thống, và tôi biên dịch lại ứng dụng.

53
00:05:11,000 --> 00:05:20,000
Bộ biên dịch C # ở đây rất rõ ràng, và nó nói rằng dấu chấm phẩy được mong đợi ở dòng 1, cột 13.

54
00:05:20,000 --> 00:05:27,000
Thật không may, không phải tất cả các thông báo lỗi rất rõ ràng. Chúng ta hãy xuống và bỏ một 1 dấu ({);
55
00:05:27,000 --> 00:05:31,000
Ở đây trên phương thức của tôi bởi vì bây giờ trình biên dịch C # sẽ không biết nơi mà phương thức này bắt đầu.

56
00:05:31,000 --> 00:05:36,000

Và nếu tôi lưu tệp đó và cố gắng biên dịch lại lần nữa, thì một dấu thiếu này thực sự đã tạo ra ba

57
00:05:36,000 --> 00:05:42,000
Các thông báo lỗi khác nhau, đang nói cho tôi một dấu chấm phẩy đã được mong đợi, và có một mã thông báo không hợp lệ.

58
00:05:42,000 --> 00:05:46,000
Và qua thời gian bạn sẽ trở nên quen với những thông báo lỗi này và trở nên quen với việc nhìn vào C #

59
00:05:46,000 --> 00:05:51,000

code và tìm ra những thứ như, oh tôi chỉ có một cái ngoặc nhọn bị mất tích ở đây

60
00:05:51,000 --> 00:05:56,000
Và nếu tôi lưu lại tệp này, chúng ta nên trở lại làm việc, nhưng chúng ta hãy thực hiện một thay đổi nữa.


61
00:05:56,000 --> 00:06:02,000
Thay vì hiển thị văn bản Hello, World, hãy sử dụng một số mã khác từ trang trình bày trước đó, và tôi muốn

62
00:06:02,000 --> 00:06:06,000

Để in ra ngày hiện tại trong tuần. Và tôi có thể làm điều đó bằng cách sử dụng lớp DateTime.

63
00:06:06,000 --> 00:06:11,000
That DateTime class là cũng trong the system namespace, Vì vậy nó có sẵn cho tôi.

64
00:06:11,000 --> 00:06:16,000
Tôi có thể có nhiều báo cáo sử dụng ở đây, nhưng các lớp  duy nhất tôi đang sử dụng cho ví dụ đơn giản này là các lớp 

65
00:06:16,000 --> 00:06:25,000
Đó là trong không gian tên System. Tôi sẽ nói xin vui lòng in ra DataTime.Now.DayOfWeek

66
00:06:25,000 --> 00:06:32,000
Và tôi sẽ lưu lại hello.cs một lần nữa. Tôi cần biên dịch lại nó cho csc để nhận những thay đổi và tạo ra một

67
00:06:32,000 --> 00:06:38,000
Thực thi, nhưng bây giờ tôi sẽ có thể chạy hello.exe. Và bạn có thể thấy rằng ví dụ này đang được ghi lại

68
00:06:38,000 --> 00:06:44,000

Vào thứ Tư. Vì vậy, ví dụ đơn giản này có rất nhiều khái niệm rất sâu sắc, khái niệm như các lớp  và kỳ lạ
69
00:06:44,000 --> 00:06:50,000
từ khóa như static và void. Ngay bây giờ yôi muốn bạn bỏ qua một số chi tiết cú pháp cụ thể  .

70
00:06:50,000 --> 00:06:54,000
Chúng ta sẽ đi đến mức bạn có thể hiểu tất cả những điều đó. Đối với ngay bây giờ, tôi chỉ muốn đi một bước trở lại

71
00:06:54,000 --> 00:06:59,000
Và nói về trình biên dịch này mà chúng ta đang sử dụng, và sau đó chúng ta có thể nhảy vào Visual Studio

72
00:06:59,000 --> 00:59:00,000
Và nhận được cùng một code chạy từ Visual Studio
